data <- readDiscreteCharacterData("data/simians4fold.nex")
# data <- readDiscreteCharacterData("data/prim4fold.nex")
contdata <- readContinuousCharacterData("data/primlht.nex")
maturity_index <- 1
longevity_index <- 3

n_species <- data.ntaxa()
n_branches <- 2 * n_species - 2
n_nodes <- 2 * n_species - 1
print(n_nodes)
taxa <- data.taxa()

# root age (dummy variable: will be fixed in the end)
root_age ~ dnUniform(0,100)

# tree is produced by a birth death process
lambda ~ dnExponential(1.0)
mu ~ dnExponential(1.0)
rho <- 1.0
timetree ~ dnBDP(lambda, mu, rho, root_age, samplingStrategy="uniform", condition="nTaxa", taxa=taxa)
tree <- readTrees("data/simians.tree", treetype="clock")[1]
# tree <- readTrees("data/prim.tree", treetype="clock")[1]
tree.makeUltrametric()
timetree.clamp(tree)

# brownian process
sigma_mat ~ dnExponential(1.0)
sigma_mat.clamp(0.1)
sigma_mat.unclamp()
nodelogmat[n_nodes] ~ dnNormal(mean=0, sd=20)
nodelogmat[n_nodes].clamp(0)
nodelogmat[n_nodes].unclamp()
for (i in (n_nodes-1):1)    {
    nodelogmat[i] ~ dnNormal(mean=nodelogmat[tree.parent(i)], sd=sigma_mat * sqrt(tree.branchLength(i)))
}

for (i in 1:n_species)  {
    if (contdata[contdata.taxonIndex(tree.nodeName(i))][maturity_index] != -1.0) {
        nodelogmat[i].clamp(log(abs(contdata[contdata.taxonIndex(tree.nodeName(i))][maturity_index]),exp(1.0)))
    }
}

# brownian process
sigma_lon ~ dnExponential(1.0)
sigma_lon.clamp(0.1)
sigma_lon.unclamp()
nodeloglon[n_nodes] ~ dnNormal(mean=0, sd=20)
nodeloglon[n_nodes].clamp(0)
nodeloglon[n_nodes].unclamp()
for (i in (n_nodes-1):1)    {
    nodeloglon[i] ~ dnNormal(mean=nodeloglon[tree.parent(i)], sd=sigma_lon * sqrt(tree.branchLength(i)))
}

for (i in 1:n_species)  {
    if (contdata[contdata.taxonIndex(tree.nodeName(i))][longevity_index] != -1.0) {
        nodeloglon[i].clamp(log(abs(contdata[contdata.taxonIndex(tree.nodeName(i))][longevity_index]),exp(1.0)))
    }
}

mixb <- 0.29
beta ~ dnExponential(1.0)
beta.clamp(0.01)
beta.unclamp()
rate0 ~ dnExponential(1.0)
rate0.clamp(0.01)
rate0.unclamp()

# rate across the tree
for (i in 1:n_branches) {
    meanclockrate[i] := abs(0.5 * (
        (rate0 + beta*mixb*exp(nodeloglon[i])) / (exp(nodelogmat[i])/365 + mixb*exp(nodeloglon[i])) + 
        (rate0 + beta*mixb*exp(nodeloglon[tree.parent(i)])) / (exp(nodelogmat[i])/365 + mixb*exp(nodeloglon[tree.parent(i)])) ))
}

varclockrate ~ dnExponential(1.0)
residalpha := 1.0 / varclockrate

for (i in 1:n_branches) {
    residrate[i] ~ dnGamma(residalpha, residalpha)
    clockrate[i] := meanclockrate[i] * residrate[i]
}

kappa ~ dnExponential(0.1)
gamma ~ dnBeta(1.0, 1.0)
Q := fnT92(kappa=kappa, gc=gamma)

seq ~ dnPhyloCTMC( tree=timetree, Q=Q, branchRates=clockrate, type="DNA" ) 
seq.clamp(data)

my_model = model(timetree)

# moves
moves = VectorMoves()

moves.append(mvScale(lambda, weight=1.0))
moves.append(mvScale(mu, weight=1.0))

moves.append(mvSlide(gamma, weight=1.0, delta=0.1))
moves.append(mvScale(kappa, weight=1.0))

moves.append(mvScale(beta, weight=1.0))
moves.append(mvScale(rate0, weight=1.0))

moves.append(mvScale(sigma_mat, weight=1.0))
for (i in 1:n_nodes) {
    moves.append(mvSlide(nodelogmat[i], weight=1.0))
}

moves.append(mvScale(sigma_lon, weight=1.0))
for (i in 1:n_nodes) {
    moves.append(mvSlide(nodeloglon[i], weight=1.0))
}

moves.append(mvScale(varclockrate, weight=1.0))
for (i in 1:n_branches) {
    moves.append(mvScale(residrate[i], weight = 1.0))
}

moves.append(mvNodeTimeSlideUniform(timetree, weight=20))
moves.append(mvSubtreeScale(timetree, weight=4))

monitors[1] = mnModel(filename="analyses/simians_lhtrate2.log", printgen=10, separator = TAB)
monitors[2] = mnFile(timetree ,filename="analyses/simians_lhtrate2.trees", printgen=10, separator = TAB)
monitors[3] = mnScreen(printgen=100, rate0, beta, varclockrate)

# Make the analysis object
analysis = mcmc(my_model, monitors, moves)
# Run the MCMC
analysis.run(10000)

treetrace = readTreeTrace("analyses/simians_lhtrate2.trees", treetype="clock", burnin=0.1)
map_tree = mccTree(treetrace, "analyses/simians_lhtrate2.tree")

