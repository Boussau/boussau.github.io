I"â<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># We are going to save the trees we simulate in the folder simulatedTrees:
dataFolder = "simulatedTrees/"
# Letâ€™s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
n_species &lt;- 10
n_genes &lt;- 2
n_alleles &lt;- 3
# we simulate an ultrametric species tree:
# Species names:
for (i in 1:n_species) {
        species[i] &lt;- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
}
spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
print(spTree)
# let's pick a constant effective population size of 50:
popSize &lt;- 50
# let's simulate gene trees now:
# taxa names:
for (g in 1:n_genes) {
  for (i in 1:n_species) {
    for (j in 1:n_alleles) {
        taxons[g][(i-1)*n_alleles+j] &lt;- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
    }
  }
  geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
  print(geneTrees[g])
}
# We can save the species tree and the gene trees:
write(spTree, filename=dataFolder+"speciesTree")
# Saving the gene trees
for (i in 1:(n_genes)) {
  write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
}
# set my move index
mi = 0
move_species_subtree_scale_beta = mvSpeciesSubtreeScaleBeta( speciesTree=spTree, weight=5 )
for (i in 1:n_genes) {
   move_species_subtree_scale_beta.addGeneTreeVariable( geneTrees[i] )
}
moves[++mi] = move_species_subtree_scale_beta
# We get a handle on our model.
# We can use any node of our model as a handle, here we choose to use the topology.
mymodel = model(spTree)
# Monitors to check the progression of the program
monitors[1] = mnScreen(printgen=10, spTree)
# Here we use a plain MCMC. You could also set nruns=2 for a replicated analysis
# or use mcmcmc with heated chains.
mymcmc = mcmc(mymodel, monitors, moves, nruns=4)
mymcmc.run(generations=1000)
mymcmc.operatorSummary()
</code></pre></div></div>
:ET