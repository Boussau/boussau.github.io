I"LV<h2 class="section" id="overview">Overview</h2>
<hr class="section" />

<p>This tutorial covers how to set up files and directories to work effectively in RevBayes <a class="citation" href="#Hoehna2014a">(Höhna 2014; Höhna et al. 2016)</a>.
This workshop assumes no familiarity with the command line, or programming in general.
The themes of good directory structuring shown in this tutorial will be used in many othe RevBayes tutorials.</p>

<h2 class="section" id="using-your-computers-graphical-user-interface">Using your computer’s graphical user interface</h2>
<hr class="section" />

<h3 class="subsection" id="downloading-and-storing-data-and-scripts">Downloading and storing data and scripts</h3>
<hr class="subsection" />

<p>Many of the RevBayes tutorials will as you to download data and/or scripts.
Let us begin by downloading the data and scripts associated with this tutorial.
For each tutorial that you do, you should create a <em>directory</em>, sometimes called a folder, somewhere logical on your computer.
Since we are doing the <code class="language-plaintext highlighter-rouge">tutorial_structure</code> tutorial, please title your directory <code class="language-plaintext highlighter-rouge">tutorial_structure</code>.
In this new directory, create two more directories, one called <em>data</em> and one called <em>scripts</em>.</p>

<p>You will note a box called <code class="language-plaintext highlighter-rouge">Data files and scripts</code> in the upper left-hand corner of this webpage.
Please download the files listed in this directory.
Drag and drop <code class="language-plaintext highlighter-rouge">example_file.nex</code> into your <code class="language-plaintext highlighter-rouge">data</code> directory.
Then, move <code class="language-plaintext highlighter-rouge">test.Rev</code> into your <code class="language-plaintext highlighter-rouge">scripts</code> directory.
Having a directory of data that contains all your data for a project, and a directory of scripts is a good practice.
This allows you to stay organized and avoid misplacing crucial scripts in your data analysis pipeline.</p>

<blockquote class="aside"><h2>Spaces In Filenames</h2><p>Most scientific programming languages and software does not deal well with spaces in file names.
If you will be doing much scientific computing, it will be best to get in the habit of not using spaces in file and folder names.</p>
</blockquote>

<h3 class="subsection" id="preparing-to-run-revbayes">Preparing to Run RevBayes</h3>
<hr class="subsection" />

<p>In this section of the tutorial, we will focus on running RevBayes from your computer’s graphical interface.
First, note down the location of your tutorial directory.
For example, mine is in my computer’s user home, in a directory called <code class="language-plaintext highlighter-rouge">Tutorials</code>.
A graphic of this is shown in Fig. 1.</p>

<p>Computers do not understand the visual information of the directory structure.
Instead, we will translate this information into text.</p>

<figure id="example"><p><img src="figures/Directory.png" width="600" /></p>
<figcaption>This is an example of the Macintosh File Viewer. In this instance, I have a directoy, <code class="language-plaintext highlighter-rouge">Tutorials</code> with a subdirectory for this specific tutorial.</figcaption>
</figure>

<h4 class="subsubsection" id="macintosh">Macintosh</h4>
<hr class="subsubsection" />

<p>The home directory on a computer on a Mac is labeled with a <code class="language-plaintext highlighter-rouge">~/</code>.
Each contained directory is separated by a <code class="language-plaintext highlighter-rouge">/</code> character.
The above directory structure would be written out like so:</p>

<div class="language-plaintext bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/tutorials/tutorial_structure/
</code></pre></div></div>

<p>Note down where you have your tutorial stored.</p>

<p>Next, we will launch RevBayes.
Do this by double-clicking on <code class="language-plaintext highlighter-rouge">rb</code>.
We will now set your working directory.
This ensures that RevBayes is aware of where in your computer your code and data are stored.
By default, RevBayes assumes you are in your user home on your computer.
Therefore, we can leave off the <code class="language-plaintext highlighter-rouge">~/</code>, as RevBayes will assume its presence.
In RevBayes, use the <code class="language-plaintext highlighter-rouge">setwd()</code> command in conjunction with your path to your tutorial to set your working directory.
For example, my command will look like so:</p>

<div class="language-plaintext bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setwd("Tutorials/tutorial_structure/")
</code></pre></div></div>

<p>Finally, test your working directory like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> source("scripts/test.Rev")
</code></pre></div></div>

<p>If everything has suceeded, you will see the following output:</p>

<div class="language-plaintext Rev-output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Processing file "scripts/test.Rev"
   Hi there! Welcome to RevBayes! I am now going to read in some test data.
   Successfully read one character matrix from file 'data/primates_and_galeopterus_cytb.nex'
   Congratulations, you set up your scripts and code directories correctly.
</code></pre></div></div>

<blockquote class="aside"><h2>If something goes wrong</h2><p>If you were not able to successfully execute the script, the most common culprit is that RevBayes is not executing from where you think. Try running getwd() and making sure that your starting working directory is what you think it is.</p>
</blockquote>

<h4 class="subsubsection" id="windows">Windows</h4>
<hr class="subsubsection" />

<p>The home directory on a computer on a Windows is labeled as <code class="language-plaintext highlighter-rouge">c:</code>.
Each contained directory is separated by a <code class="language-plaintext highlighter-rouge">\\</code> character.
The above directory structure would be written out like so:</p>

<div class="language-plaintext bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"c:\\april\\tutorials\\tutorial_structure"
</code></pre></div></div>

<p>Note down where you have your tutorial stored.</p>

<p>Next, we will launch RevBayes.
Do this by double-clicking on <code class="language-plaintext highlighter-rouge">rb</code>.
We will now set your working directory.
This ensures that RevBayes is aware of where in your computer your code and data are stored.
In RevBayes, use the <code class="language-plaintext highlighter-rouge">setwd()</code> command in conjunction with your path to your tutorial to set your working directory.
For example, my command will look like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setwd("c:\\april\\tutorials\\tutorial_structure")
</code></pre></div></div>

<p>Finally, test your working directory like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> source("scripts/test.Rev")
</code></pre></div></div>

<p>If everything has suceeded, you will see the following output:</p>

<div class="language-plaintext Rev-output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Processing file "scripts/test.Rev"
   Hi there! Welcome to RevBayes! I am now going to read in some test data.
   Successfully read one character matrix from file 'data/primates_and_galeopterus_cytb.nex'
   Congratulations, you set up your scripts and code directories correctly.
</code></pre></div></div>

<h4 class="subsubsection" id="linux">Linux</h4>
<hr class="subsubsection" />

<p>Linux users must access RevBayes via the command line interface.</p>

<h2 class="section" id="using-your-computers-terminal-interface">Using your computer’s terminal interface</h2>
<hr class="section" />

<p>Many RevBayes users may want to use RevBayes from the <code class="language-plaintext highlighter-rouge">command-line interface</code>.
This technology allows users to interact directly with the computer’s file system.
It is the predominant way many remote servers and supercomputers are used.</p>

<blockquote class="aside"><h2>Command Line on Windows</h2><p>Linux and Macintosh users have a command line interface by default on their machines. Windows users will have to install one. A common command line interface is <a href="https://gitforwindows.org/">Git For Windows</a>.</p>
</blockquote>

<h3 class="subsection" id="downloading-and-storing-data-and-scripts">Downloading and storing data and scripts</h3>
<hr class="subsection" />

<p>Many of the RevBayes tutorials will as you to download data and/or scripts.
Let us begin by downloading the data and scripts associated with this tutorial.
For each tutorial that you do, you should create a <em>directory</em>, sometimes called a folder, somewhere logical on your computer.
Since we are doing the <code class="language-plaintext highlighter-rouge">tutorial_structure</code> tutorial, please title your directory <code class="language-plaintext highlighter-rouge">tutorial_structure</code>.
In this new directory, create two more directories, one called <em>data</em> and one called <em>scripts</em>.</p>

<blockquote class="aside"><h2>Spaces in filenames</h2><p>Most scientific programming languages and software does not deal well with spaces in file names.
If you will be doing much scientific computing, it will be best to get in the habit of not using spaces in file and folder names.</p>
</blockquote>

<p>You will note a box called <code class="language-plaintext highlighter-rouge">Data files and scripts</code> in the upper left-hand corner of this webapge.
Please download the files listed in this directory.
Drag and drop <code class="language-plaintext highlighter-rouge">primates_and_galeopterus_cytb.nex</code> into your <code class="language-plaintext highlighter-rouge">data</code> directory.
Then, move <code class="language-plaintext highlighter-rouge">test.Rev</code> into your <code class="language-plaintext highlighter-rouge">scripts</code> directory.</p>

<p>Having a directory of data that contains all your data for a project, and a directory of scripts is a good practice.
This allows you to stay organized and avoid misplacing crucial scripts in your data analysis pipeline.</p>

<h3 class="subsection" id="preparing-to-run-revbayes">Preparing to Run RevBayes</h3>
<hr class="subsection" />

<p>In this section of the tutorial, we will focus on running RevBayes from your computer’s graphical interface.
First, note down the location of your tutorial directory.
For example, mine is in my laptop’s shared drive, in a directory called <code class="language-plaintext highlighter-rouge">tutorials</code>.
This can be seen in <a href="#Directory"></a></p>

<p>Computers do not understand the visual information of the directory structure.
Instead, we will translate this information into text.</p>

<figure id="Directory"><p><img src="figures/Directory.png" width="600" /></p>
<figcaption>This is an example of the Macintosh File Viewer. In this instance, I have a directoy, <code class="language-plaintext highlighter-rouge">tutorials</code> with a subdirectory for this specific tutorial.</figcaption>
</figure>

<h4 class="subsubsection" id="macintosh-and-linux">Macintosh and Linux</h4>
<hr class="subsubsection" />

<p>The home directory on a computer on in a terminal is labeled with a <code class="language-plaintext highlighter-rouge">~/</code>.
Each contained directory is separated by a <code class="language-plaintext highlighter-rouge">/</code> character.
The above directory structure would be written out like so:</p>

<div class="language-plaintext bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/Tutorials/tutorial_structure/
</code></pre></div></div>

<p>Open your terminal application. Change directories into the tutorial directory with  the terminal’s <code class="language-plaintext highlighter-rouge">cd</code> command. For example, my command will be:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd ~/Tutorials/tutorial_structure/
</code></pre></div></div>

<p>Next, we will launch RevBayes. First, note where RevBayes is stored on your computer.</p>

<p>For example, my copy of RevBayes is stored a software directory in my user home.
Therefore, to launch my RevBayes, I will type:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/software/rb
</code></pre></div></div>

<p>Finally, test your working directory like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> source("scripts/test.Rev")
</code></pre></div></div>

<p>If everything has suceeded, you will see the following output:</p>

<div class="language-plaintext Rev-output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Processing file "scripts/test.Rev"
   Hi there! Welcome to RevBayes! I am now going to read in some test data.
   Successfully read one character matrix from file 'data/primates_and_galeopterus_cytb.nex'
   Congratulations, you set up your scripts and code directories correctly.
</code></pre></div></div>

<blockquote class="aside"><h2>The System Path</h2><p>The <code class="language-plaintext highlighter-rouge">System Path</code> tells your computer default locations to look for pieces of software.
If a piece of software is added to the path, it can be found and launched from anywhere on the computer.
This is beyond the scope of this tutorial, but information is readily available on doing this from other sources. If RevBayes is in your path, it can be executed by simply typing <code class="language-plaintext highlighter-rouge">rb</code> on Windows or <code class="language-plaintext highlighter-rouge">./rb</code> on Mac or Linux.</p>
</blockquote>

<h4 class="subsubsection" id="windows">Windows</h4>
<hr class="subsubsection" />

<p>We will first launch RevBayes.
Open your terminal application.
See the aside <code class="language-plaintext highlighter-rouge">Command Line on Windows</code> for more information on this point.
Note where RevBayes is stored on your computer.</p>

<p>For example, my copy of RevBayes is stored a software directory in my user home.
Therefore, to launch my RevBayes, I will type:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/software/rb
</code></pre></div></div>

<p>Next, we will set our working directory.
Windows will not pick up file paths from the environment in the same way Mac and Linux will.
Therefore, we will need to write out our directories, separated by <code class="language-plaintext highlighter-rouge">\\</code> characters.
My tutorial directory, as shown in Figure 1, will be written out as:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setwd("c:\\april\\tutorials\\tutorial_structure")
</code></pre></div></div>

<p>Finally, test your working directory like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> source("scripts/test.Rev")
</code></pre></div></div>

<p>If everything has succeeded, you will see the following output:</p>

<div class="language-plaintext Rev-output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Processing file "scripts/test.Rev"
   Hi there! Welcome to RevBayes! I am now going to read in some test data.
   Successfully read one character matrix from file 'data/primates_and_galeopterus_cytb.nex'
   Congratulations, you set up your scripts and code directories correctly.
</code></pre></div></div>

<h2 class="section" id="rstudio">RStudio</h2>
<hr class="section" />

<p>Many RevBayes users may want to use RevBayes through RStudio (missing reference), a popular graphical interface for R.
R is a fairly common computing language in biology.
In this section of the tutorial, we will focus on running RevBayes from RStudio. Once you’ve followed the RStudio instructions on the <a href="https://revbayes.github.io/gui-setup">installs page</a>, you can run use Rev language as you would in a standard RMarkown document.</p>

<p>RStudio has an interface with four panes: the editor (upper left), console (lower left), environment (upper right), and files (lower right).
This can be seen below</p>
<figure id="Rstudio"><p><img src="figures/RStudio.png" width="800" /></p>
<figcaption>A sample RStudio window.</figcaption>
</figure>

<p>In the upper-right hand panel, start a new RMarkdown document. RMarkdown is used via “chunks”, or  lines of code. In a new RMarkdown notebook, the first cell is shown in <a href="#markdownsetup"></a></p>

<figure id="markdownsetup"><p><img src="figures/RSetup.png" width="600" /></p>
<figcaption>The first cell of an RMarkdown notebook.</figcaption>
</figure>

<p>We will edit this cell to add two variables, the root directory and the engine.path. The working directory tells R what directory you want to work in. We will set this equal to the directory to which we downloaded the data and scripts. For example, if the directory structure if as shown in figure <a href="#example"></a>, this line will be <code class="language-plaintext highlighter-rouge">knitr::opts_chunk$set(root.dir = "~/projects/tutorials/tutorial_structure/)</code> on Mac and Linux. On PC, it will be <code class="language-plaintext highlighter-rouge">setwd("c:\\april\\tutorials\\tutorial_structure")</code>.</p>

<p>The engine.path is where RevBayes is on your computer. If my copy of RevBayes is in a directory called “software” in my user home, my enine path will be <code class="language-plaintext highlighter-rouge">knitr::opts_chunk$set(engine.pat="~/software/rb")</code> on Mac and Linux or <code class="language-plaintext highlighter-rouge">knitr::opts_chunk$set(engine.path="c:\\april\\software\\rb")</code> on PC.</p>

<p>The appearance of the setup cell can be seen below.</p>

<figure id="CompletedSetup"><p><img src="figures/CompletedSetup.png" width="400" /></p>
<figcaption>This setup cell shows an example of setting the work directory and the engine path (to tell R where RevBayes is located).</figcaption>
</figure>

<p>Run this chunk by clicking the green arrow in the upper-left hand corner of the cell.</p>

<p>Next, you will note other RMarkdown chunks in the document. By changing the <code class="language-plaintext highlighter-rouge">r</code> in the curly braces to <code class="language-plaintext highlighter-rouge">rb</code>, we can run RevBayes in a markdown document. By choosing <code class="language-plaintext highlighter-rouge">r</code> or <code class="language-plaintext highlighter-rouge">rb</code>, we can use both the R programming language and RevBayes in the same notebook.</p>

<figure id="RBMkd"><p><img src="figures/RbMarkdown.png" width="300" /></p>
<figcaption>This is an example of a Rev Markdown cell inside an RMarkdown document.</figcaption>
</figure>

<pre><code class="language-{rb}">variable &lt;- "Hi there! Welcome to RevBayes! I am now going to read in some test data."

variable
</code></pre>

<p>Run it by clicking the green arrow. If this execute correctly, you will receive the message.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Processing file "scripts/test.Rev"
   Hi there! Welcome to RevBayes! I am now going to read in some test data.
</code></pre></div></div>

<p>Now, we’ll actually read in the data. Start a new Markdown chunk and enter:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>molecular &lt;- readDiscreteCharacterData("data/example_file.nex")

success &lt;- "Congratulations, you set up your scripts and code directories correctly."

success
q()
</code></pre></div></div>

<p>If this executes correctly, you will receive the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Successfully read one character matrix from file 'data/primates_and_galeopterus_cytb.nex'
   Congratulations, you set up your scripts and code directories correctly.
</code></pre></div></div>

<p>If you have made a mistake and need to erase previous output, you can add a flag to the markdown cells that refreshes previously-entered commands, as shown in figure <a href="#mistake"></a>.</p>

<figure id="mistake"><p><img src="figures/freshchunkrb.png" width="300" /></p>
<figcaption>This is an example of how to reset after making a mistake.</figcaption>
</figure>

<p>Lastly, the entire document can be <code class="language-plaintext highlighter-rouge">knitted</code> to an output file. At the top of your screen, there is a button labeled Knit. This allows you to run all of your code and save the text, output, and figures to html, PDF, and other formats.</p>

<h2 class="section" id="using-jupyter">Using Jupyter</h2>
<hr class="section" />

<p>Jupyter (missing reference) is a popular interface for programming in python, though it implements numerous other languages. Once you have completed the instructions on the <a href="https://revbayes.github.io/gui-setup">installs page</a>, you will be able to choose RevBayes as a possible language. An example of this is below.</p>

<figure id="mistake"><p><img src="figures/Jupyter.png" width="800" /></p>
<figcaption>This is a Jupyter notebook with the language set to Rev.</figcaption>
</figure>

<p>Once the language is set to Rev, all cells in the notebook will execute using RevBayes. Example notebooks can be found in the <a href="https://github.com/revbayes/RevNotebooks">notebooks</a> repository.</p>
:ET