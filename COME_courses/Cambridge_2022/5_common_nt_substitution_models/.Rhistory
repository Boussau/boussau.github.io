drawNewState <- function (probabilities, states){
u <- runif(n=1, min=0,max=1)
if (u < probabilities[1])
{ return (states[1])}
else if (u < probabilities[1]+probabilities[2])
{ return (states[2])}
else { return (states[3])}
}
# Function to simulate along a branch using the Gillespie algorithm under a rate matrix
simulateAlongBranch <- function(startingState, branchLength, rateMatrix) {
l <- 0.0
numberOfSubstitutions <- 0
current <- startingState
while (l < branchLength) {
currentRow=1
if (current =='C') {
currentRow=2
}
else if (current =='G') {
currentRow=3
}
else if (current =='T') {
currentRow=4
}
# rateOfMovingAway is the sum of the rates of all possible events,
# or minus the diagonal element
rateOfMovingAway = - rateMatrix[currentRow, currentRow]
l <- l + rexp(rate=rateOfMovingAway, n=1)
if (l < branchLength) {
numberOfSubstitutions <- numberOfSubstitutions + 1
possibleArrivingIndices <- setdiff(c(1,2,3,4), currentRow)
probabilitiesOfArrivingStates <- rateMatrix[currentRow, possibleArrivingIndices]/rateOfMovingAway
current <- drawNewState(probabilitiesOfArrivingStates, c("A", "C", "G", "T")[possibleArrivingIndices])
}
}
return (c(current, numberOfSubstitutions))
}
simulateSiteHistory <- function (startingFrequencies, branchLength, rateMatrix) {
}
allHistories <- matrix(c(), c(), nrow=1, ncol=2)
allHistories <- matrix(c(), c(), nrow=1, ncol=2)
rep(NA, 5)
allHistories <- matrix(rep(NA, 2*numberOfSites), nrow=numberOfSites, ncol=2)
numberOfSites <- 5
allHistories <- matrix(rep(NA, 2*numberOfSites), nrow=numberOfSites, ncol=2)
allHistories
# Useful function for drawing a DNA state, for instance at the root
# We assume the order is A, C, G, T
drawStateAtRoot <- function (probabilities){
states <- c("A", "C", "G", "T")
u <- runif(n=1, min=0,max=1)
if (u < probabilities[1])
{ return (states[1])}
else if (u < probabilities[1]+probabilities[2])
{ return (states[2])}
else if (u < probabilities[1]+probabilities[2]+probabilities[3])
{ return (states[3])}
else { return (states[4])}
}
drawNewState <- function (probabilities, states){
u <- runif(n=1, min=0,max=1)
if (u < probabilities[1])
{ return (states[1])}
else if (u < probabilities[1]+probabilities[2])
{ return (states[2])}
else { return (states[3])}
}
# Function to simulate along a branch using the Gillespie algorithm under a rate matrix
simulateAlongBranch <- function(startingState, branchLength, rateMatrix) {
l <- 0.0
numberOfSubstitutions <- 0
current <- startingState
while (l < branchLength) {
currentRow=1
if (current =='C') {
currentRow=2
}
else if (current =='G') {
currentRow=3
}
else if (current =='T') {
currentRow=4
}
# rateOfMovingAway is the sum of the rates of all possible events,
# or minus the diagonal element
rateOfMovingAway = - rateMatrix[currentRow, currentRow]
l <- l + rexp(rate=rateOfMovingAway, n=1)
if (l < branchLength) {
numberOfSubstitutions <- numberOfSubstitutions + 1
possibleArrivingIndices <- setdiff(c(1,2,3,4), currentRow)
probabilitiesOfArrivingStates <- rateMatrix[currentRow, possibleArrivingIndices]/rateOfMovingAway
current <- drawNewState(probabilitiesOfArrivingStates, c("A", "C", "G", "T")[possibleArrivingIndices])
}
}
return (c(current, numberOfSubstitutions))
}
simulateSiteHistory <- function (startingFrequencies, branchLength, rateMatrix) {
rootState <- drawStateAtRoot(startingFrequencies)
return(simulateAlongBranch(startingState=rootState, branchLength=branchLength, rateMatrix=rateMatrix))
}
simulateManySiteHistories <- function (branchLength, rateMatrix, numberOfSites) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
allHistories <- matrix(rep(NA, 2*numberOfSites), nrow=numberOfSites, ncol=2)
for (i in 1:numberOfSites) {
allHistories[i,] <- simulateSiteHistory(startingFrequencies=stationaryFrequencies, branchLength=branchLength, rateMatrix=rateMatrix)
}
return(allHistories)
}
computeStationaryFrequencies <- function(rateMatrix) {
return(expm(rateMatrix*100))
}
computeStationaryFrequencies(substitutionRateMatrix)
library(expm) # to compute a matrix exponential
computeStationaryFrequencies(substitutionRateMatrix)
computeStationaryFrequencies <- function(rateMatrix) {
return(expm(rateMatrix*100)[1,])
}
computeStationaryFrequencies(substitutionRateMatrix)
siteHistories <- simulateManySiteHistories(branchLength=0.5, rateMatrix=substitutionRateMatrix, numberOfSites=1000)
siteHistories
summary(siteHistories[,2])
summary(as.numeric(siteHistories[,2])
summary(as.numeric(siteHistories[,2]))
summary(as.numeric(siteHistories[,2]))
# Useful function for drawing a DNA state, for instance at the root
# We assume the order is A, C, G, T
drawStateAtRoot <- function (probabilities){
states <- c("A", "C", "G", "T")
u <- runif(n=1, min=0,max=1)
if (u < probabilities[1])
{ return (states[1])}
else if (u < probabilities[1]+probabilities[2])
{ return (states[2])}
else if (u < probabilities[1]+probabilities[2]+probabilities[3])
{ return (states[3])}
else { return (states[4])}
}
drawNewState <- function (probabilities, states){
u <- runif(n=1, min=0,max=1)
if (u < probabilities[1])
{ return (states[1])}
else if (u < probabilities[1]+probabilities[2])
{ return (states[2])}
else { return (states[3])}
}
# Function to compute the stationary frequencies given a rate matrix
computeStationaryFrequencies <- function(rateMatrix) {
return(expm(rateMatrix*100)[1,])
}
# Function to simulate along a branch using the Gillespie algorithm under a rate matrix
simulateAlongBranch <- function(startingState, branchLength, rateMatrix) {
l <- 0.0
numberOfSubstitutions <- 0
current <- startingState
while (l < branchLength) {
currentRow=1
if (current =='C') {
currentRow=2
}
else if (current =='G') {
currentRow=3
}
else if (current =='T') {
currentRow=4
}
# rateOfMovingAway is the sum of the rates of all possible events,
# or minus the diagonal element
rateOfMovingAway = - rateMatrix[currentRow, currentRow]
l <- l + rexp(rate=rateOfMovingAway, n=1)
if (l < branchLength) {
numberOfSubstitutions <- numberOfSubstitutions + 1
possibleArrivingIndices <- setdiff(c(1,2,3,4), currentRow)
probabilitiesOfArrivingStates <- rateMatrix[currentRow, possibleArrivingIndices]/rateOfMovingAway
current <- drawNewState(probabilitiesOfArrivingStates, c("A", "C", "G", "T")[possibleArrivingIndices])
}
}
return (c(current, numberOfSubstitutions))
}
simulateSiteHistory <- function (startingFrequencies, branchLength, rateMatrix) {
rootState <- drawStateAtRoot(startingFrequencies)
return(simulateAlongBranch(startingState=rootState, branchLength=branchLength, rateMatrix=rateMatrix))
}
simulateManySiteHistories <- function (branchLength, rateMatrix, numberOfSites) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
allHistories <- matrix(rep(NA, 2*numberOfSites), nrow=numberOfSites, ncol=2)
for (i in 1:numberOfSites) {
allHistories[i,] <- simulateSiteHistory(startingFrequencies=stationaryFrequencies, branchLength=branchLength, rateMatrix=rateMatrix)
}
return(allHistories)
}
plotNumbersOfSubstitutions <- function (siteHistories) {
hist(siteHistories, main=paste0("Number of substitutions; mean = ", mean(as.numeric(siteHistories[,2]))))
}
plotNumbersOfSubstitutions(siteHistories)
plotNumbersOfSubstitutions <- function (siteHistories) {
numbers <- as.numeric(siteHistories[,2])
hist(numbers, main=paste0("Number of substitutions; mean = ", mean(numbers)))
}
plotNumbersOfSubstitutions(siteHistories)
substitutionRateMatrix <- 3*matrix(c(c(-1.916, 0.541, 0.787, 0.588), c(0.148, -1.069, 0.415, 0.506), c(0.286, 0.170, -0.591, 0.135), c(0.525, 0.236, 0.594, -1.355)), nrow=4, ncol=4, byrow=TRUE)
print(substitutionRateMatrix)
simulateAlongBranch(startingState = "A", branchLength = 0.5, rateMatrix = substitutionRateMatrix)
siteHistories <- simulateManySiteHistories(branchLength=0.5, rateMatrix=substitutionRateMatrix, numberOfSites=1000)
plotNumbersOfSubstitutions(siteHistories)
stationaryFrequencies <- computeStationaryFrequencies(substitutionRateMatrix)
computeScaleOfMatrix <- function(rateMatrix) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
qiis <- c(rateMatrix[1,1], rateMatrix[2,2], rateMatrix[3,3], rateMatrix[4,4])
scale <- stationaryFrequencies[1] * qiis[1] + stationaryFrequencies[2] * qiis[2] + stationaryFrequencies[3] * qiis[3] + stationaryFrequencies[4] * qiis[4]
}
computeScaleOfMatrix <- function(rateMatrix) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
qiis <- c(rateMatrix[1,1], rateMatrix[2,2], rateMatrix[3,3], rateMatrix[4,4])
scale <- stationaryFrequencies[1] * qiis[1] + stationaryFrequencies[2] * qiis[2] + stationaryFrequencies[3] * qiis[3] + stationaryFrequencies[4] * qiis[4]
return(scale)
}
computeScaleOfMatrix(substitutionRateMatrix)
computeScaleOfMatrix <- function(rateMatrix) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
qiis <- c(rateMatrix[1,1], rateMatrix[2,2], rateMatrix[3,3], rateMatrix[4,4])
scale <- -(stationaryFrequencies[1] * qiis[1] + stationaryFrequencies[2] * qiis[2] + stationaryFrequencies[3] * qiis[3] + stationaryFrequencies[4] * qiis[4])
return(scale)
}
computeScaleOfMatrix <- function(rateMatrix) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
qiis <- c(rateMatrix[1,1], rateMatrix[2,2], rateMatrix[3,3], rateMatrix[4,4])
scale <- -(stationaryFrequencies[1] * qiis[1] + stationaryFrequencies[2] * qiis[2] + stationaryFrequencies[3] * qiis[3] + stationaryFrequencies[4] * qiis[4])
return(scale)
}
computeScaleOfMatrix(substitutionRateMatrix)
scale <- computeScaleOfMatrix(substitutionRateMatrix)
scaledSubstitutionRateMatrix <- substitutionRateMatrix / scale
siteHistories <- simulateManySiteHistories(branchLength=0.5, rateMatrix=substitutionRateMatrix, numberOfSites=1000)
plotNumbersOfSubstitutions(siteHistories)
siteHistories <- simulateManySiteHistories(branchLength=0.5, rateMatrix=scaledSubstitutionRateMatrix, numberOfSites=1000)
plotNumbersOfSubstitutions(siteHistories)
substitutionRateMatrix <- 3*matrix(c(c(-1.916, 0.541, 0.787, 0.588), c(0.148, -1.069, 0.415, 0.506), c(0.286, 0.170, -0.591, 0.135), c(0.525, 0.236, 0.594, -1.355)), nrow=4, ncol=4, byrow=TRUE)
print(substitutionRateMatrix)
library(expm) # to compute a matrix exponential
# Useful function for drawing a DNA state, for instance at the root
# We assume the order is A, C, G, T
drawStateAtRoot <- function (probabilities){
states <- c("A", "C", "G", "T")
u <- runif(n=1, min=0,max=1)
if (u < probabilities[1])
{ return (states[1])}
else if (u < probabilities[1]+probabilities[2])
{ return (states[2])}
else if (u < probabilities[1]+probabilities[2]+probabilities[3])
{ return (states[3])}
else { return (states[4])}
}
drawNewState <- function (probabilities, states){
u <- runif(n=1, min=0,max=1)
if (u < probabilities[1])
{ return (states[1])}
else if (u < probabilities[1]+probabilities[2])
{ return (states[2])}
else { return (states[3])}
}
# Function to compute the stationary frequencies given a rate matrix
computeStationaryFrequencies <- function(rateMatrix) {
return(expm(rateMatrix*100)[1,])
}
# Function to simulate along a branch using the Gillespie algorithm under a rate matrix
simulateAlongBranch <- function(startingState, branchLength, rateMatrix) {
l <- 0.0
numberOfSubstitutions <- 0
current <- startingState
while (l < branchLength) {
currentRow=1
if (current =='C') {
currentRow=2
}
else if (current =='G') {
currentRow=3
}
else if (current =='T') {
currentRow=4
}
# rateOfMovingAway is the sum of the rates of all possible events,
# or minus the diagonal element
rateOfMovingAway = - rateMatrix[currentRow, currentRow]
l <- l + rexp(rate=rateOfMovingAway, n=1)
if (l < branchLength) {
numberOfSubstitutions <- numberOfSubstitutions + 1
possibleArrivingIndices <- setdiff(c(1,2,3,4), currentRow)
probabilitiesOfArrivingStates <- rateMatrix[currentRow, possibleArrivingIndices]/rateOfMovingAway
current <- drawNewState(probabilitiesOfArrivingStates, c("A", "C", "G", "T")[possibleArrivingIndices])
}
}
return (c(current, numberOfSubstitutions))
}
simulateSiteHistory <- function (startingFrequencies, branchLength, rateMatrix) {
rootState <- drawStateAtRoot(startingFrequencies)
return(simulateAlongBranch(startingState=rootState, branchLength=branchLength, rateMatrix=rateMatrix))
}
simulateManySiteHistories <- function (branchLength, rateMatrix, numberOfSites) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
allHistories <- matrix(rep(NA, 2*numberOfSites), nrow=numberOfSites, ncol=2)
for (i in 1:numberOfSites) {
allHistories[i,] <- simulateSiteHistory(startingFrequencies=stationaryFrequencies, branchLength=branchLength, rateMatrix=rateMatrix)
}
return(allHistories)
}
plotNumbersOfSubstitutions <- function (siteHistories) {
numbers <- as.numeric(siteHistories[,2])
hist(numbers, main=paste0("Number of substitutions; mean = ", mean(numbers)))
}
substitutionRateMatrix <- 3*matrix(c(c(-1.916, 0.541, 0.787, 0.588), c(0.148, -1.069, 0.415, 0.506), c(0.286, 0.170, -0.591, 0.135), c(0.525, 0.236, 0.594, -1.355)), nrow=4, ncol=4, byrow=TRUE)
print(substitutionRateMatrix)
siteHistories <- simulateManySiteHistories(branchLength=0.5, rateMatrix=substitutionRateMatrix, numberOfSites=1000)
plotNumbersOfSubstitutions(siteHistories)
computeScaleOfMatrix <- function(rateMatrix) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
qiis <- c(rateMatrix[1,1], rateMatrix[2,2], rateMatrix[3,3], rateMatrix[4,4])
scale <- -(stationaryFrequencies[1] * qiis[1] + stationaryFrequencies[2] * qiis[2] + stationaryFrequencies[3] * qiis[3] + stationaryFrequencies[4] * qiis[4])
return(scale)
}
scale <- computeScaleOfMatrix(substitutionRateMatrix)
print(scale)
scaledSubstitutionRateMatrix <- substitutionRateMatrix / scale
siteHistories <- simulateManySiteHistories(branchLength=0.5, rateMatrix=scaledSubstitutionRateMatrix, numberOfSites=1000)
plotNumbersOfSubstitutions(siteHistories)
library(expm) # to compute a matrix exponential
# Function for drawing a DNA state, for instance at the root
# We assume the order is A, C, G, T
drawStateAtRoot <- function (probabilities){
states <- c("A", "C", "G", "T")
u <- runif(n=1, min=0,max=1)
if (u < probabilities[1])
{ return (states[1])}
else if (u < probabilities[1]+probabilities[2])
{ return (states[2])}
else if (u < probabilities[1]+probabilities[2]+probabilities[3])
{ return (states[3])}
else { return (states[4])}
}
# Function to draw a state on a branch
drawNewState <- function (probabilities, states){
u <- runif(n=1, min=0,max=1)
if (u < probabilities[1])
{ return (states[1])}
else if (u < probabilities[1]+probabilities[2])
{ return (states[2])}
else { return (states[3])}
}
# Function to compute the stationary frequencies associated to a rate matrix
computeStationaryFrequencies <- function(rateMatrix) {
return(expm(rateMatrix*100)[1,])
}
# Function to simulate along a branch using the Gillespie algorithm,
# under a particular rate matrix, given some branch length,
# and given a starting state.
simulateAlongBranch <- function(startingState, branchLength, rateMatrix) {
l <- 0.0
numberOfSubstitutions <- 0
current <- startingState
while (l < branchLength) {
currentRow=1
if (current =='C') {
currentRow=2
}
else if (current =='G') {
currentRow=3
}
else if (current =='T') {
currentRow=4
}
# rateOfMovingAway is the sum of the rates of all possible events,
# aka minus the diagonal element
rateOfMovingAway = - rateMatrix[currentRow, currentRow]
l <- l + rexp(rate=rateOfMovingAway, n=1)
if (l < branchLength) {
numberOfSubstitutions <- numberOfSubstitutions + 1
possibleArrivingIndices <- setdiff(c(1,2,3,4), currentRow)
probabilitiesOfArrivingStates <- rateMatrix[currentRow, possibleArrivingIndices]/rateOfMovingAway
current <- drawNewState(probabilitiesOfArrivingStates, c("A", "C", "G", "T")[possibleArrivingIndices])
}
}
return (c(current, numberOfSubstitutions))
}
# Simulate a site history given starting (root) frequencies, a branch length,
# and a rate matrix.
simulateSiteHistory <- function (startingFrequencies, branchLength, rateMatrix) {
rootState <- drawStateAtRoot(startingFrequencies)
return(simulateAlongBranch(startingState=rootState, branchLength=branchLength, rateMatrix=rateMatrix))
}
# Simulate numberOfSites site histories along a branch of length branchLength,
# with a rate matrix rateMatrix.
simulateManySiteHistories <- function (branchLength, rateMatrix, numberOfSites) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
allHistories <- matrix(rep(NA, 2*numberOfSites), nrow=numberOfSites, ncol=2)
for (i in 1:numberOfSites) {
allHistories[i,] <- simulateSiteHistory(startingFrequencies=stationaryFrequencies, branchLength=branchLength, rateMatrix=rateMatrix)
}
return(allHistories)
}
# Plot the number of substitutions as contained in siteHistories.
plotNumbersOfSubstitutions <- function (siteHistories) {
numbers <- as.numeric(siteHistories[,2])
hist(numbers, main=paste0("Number of substitutions; mean = ", mean(numbers)))
}
substitutionRateMatrix <- 3*matrix(c(c(-1.916, 0.541, 0.787, 0.588), c(0.148, -1.069, 0.415, 0.506), c(0.286, 0.170, -0.591, 0.135), c(0.525, 0.236, 0.594, -1.355)), nrow=4, ncol=4, byrow=TRUE)
print(substitutionRateMatrix)
siteHistories <- simulateManySiteHistories(branchLength=0.5, rateMatrix=substitutionRateMatrix, numberOfSites=1000)
plotNumbersOfSubstitutions(siteHistories)
computeScaleOfMatrix <- function(rateMatrix) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
qiis <- c(rateMatrix[1,1], rateMatrix[2,2], rateMatrix[3,3], rateMatrix[4,4])
scale <- -(stationaryFrequencies[1] * qiis[1] + stationaryFrequencies[2] * qiis[2] + stationaryFrequencies[3] * qiis[3] + stationaryFrequencies[4] * qiis[4])
return(scale)
}
scale <- computeScaleOfMatrix(substitutionRateMatrix)
print(scale)
scaledSubstitutionRateMatrix <- substitutionRateMatrix / scale
siteHistories <- simulateManySiteHistories(branchLength=0.5, rateMatrix=scaledSubstitutionRateMatrix, numberOfSites=1000)
plotNumbersOfSubstitutions(siteHistories)
library(expm) # to compute a matrix exponential
# Function for drawing a DNA state, for instance at the root
# We assume the order is A, C, G, T
drawStateAtRoot <- function (probabilities){
states <- c("A", "C", "G", "T")
u <- runif(n=1, min=0,max=1)
if (u < probabilities[1])
{ return (states[1])}
else if (u < probabilities[1]+probabilities[2])
{ return (states[2])}
else if (u < probabilities[1]+probabilities[2]+probabilities[3])
{ return (states[3])}
else { return (states[4])}
}
# Function to draw a state on a branch
drawNewState <- function (probabilities, states){
u <- runif(n=1, min=0,max=1)
if (u < probabilities[1])
{ return (states[1])}
else if (u < probabilities[1]+probabilities[2])
{ return (states[2])}
else { return (states[3])}
}
# Function to compute the stationary frequencies associated to a rate matrix
computeStationaryFrequencies <- function(rateMatrix) {
return(expm(rateMatrix*100)[1,])
}
# Function to simulate along a branch using the Gillespie algorithm,
# under a particular rate matrix, given some branch length,
# and given a starting state.
simulateAlongBranch <- function(startingState, branchLength, rateMatrix) {
l <- 0.0
numberOfSubstitutions <- 0
current <- startingState
while (l < branchLength) {
currentRow=1
if (current =='C') {
currentRow=2
}
else if (current =='G') {
currentRow=3
}
else if (current =='T') {
currentRow=4
}
# rateOfMovingAway is the sum of the rates of all possible events,
# aka minus the diagonal element
rateOfMovingAway = - rateMatrix[currentRow, currentRow]
l <- l + rexp(rate=rateOfMovingAway, n=1)
if (l < branchLength) {
numberOfSubstitutions <- numberOfSubstitutions + 1
possibleArrivingIndices <- setdiff(c(1,2,3,4), currentRow)
probabilitiesOfArrivingStates <- rateMatrix[currentRow, possibleArrivingIndices]/rateOfMovingAway
current <- drawNewState(probabilitiesOfArrivingStates, c("A", "C", "G", "T")[possibleArrivingIndices])
}
}
return (c(current, numberOfSubstitutions))
}
# Simulate a site history given starting (root) frequencies, a branch length,
# and a rate matrix.
simulateSiteHistory <- function (startingFrequencies, branchLength, rateMatrix) {
rootState <- drawStateAtRoot(startingFrequencies)
return(simulateAlongBranch(startingState=rootState, branchLength=branchLength, rateMatrix=rateMatrix))
}
# Simulate numberOfSites site histories along a branch of length branchLength,
# with a rate matrix rateMatrix.
simulateManySiteHistories <- function (branchLength, rateMatrix, numberOfSites) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
allHistories <- matrix(rep(NA, 2*numberOfSites), nrow=numberOfSites, ncol=2)
for (i in 1:numberOfSites) {
allHistories[i,] <- simulateSiteHistory(startingFrequencies=stationaryFrequencies, branchLength=branchLength, rateMatrix=rateMatrix)
}
return(allHistories)
}
# Plot the number of substitutions as contained in siteHistories.
plotNumbersOfSubstitutions <- function (siteHistories) {
numbers <- as.numeric(siteHistories[,2])
hist(numbers, main=paste0("Number of substitutions; mean = ", mean(numbers)), xlab="Numbers of substitutions", ylab="Number of sites")
}
substitutionRateMatrix <- 3*matrix(c(c(-1.916, 0.541, 0.787, 0.588), c(0.148, -1.069, 0.415, 0.506), c(0.286, 0.170, -0.591, 0.135), c(0.525, 0.236, 0.594, -1.355)), nrow=4, ncol=4, byrow=TRUE)
print(substitutionRateMatrix)
siteHistories <- simulateManySiteHistories(branchLength=0.5, rateMatrix=substitutionRateMatrix, numberOfSites=1000)
plotNumbersOfSubstitutions(siteHistories)
computeScaleOfMatrix <- function(rateMatrix) {
stationaryFrequencies <- computeStationaryFrequencies(rateMatrix)
qiis <- c(rateMatrix[1,1], rateMatrix[2,2], rateMatrix[3,3], rateMatrix[4,4])
scale <- -(stationaryFrequencies[1] * qiis[1] + stationaryFrequencies[2] * qiis[2] + stationaryFrequencies[3] * qiis[3] + stationaryFrequencies[4] * qiis[4])
return(scale)
}
scale <- computeScaleOfMatrix(substitutionRateMatrix)
print(scale)
scaledSubstitutionRateMatrix <- substitutionRateMatrix / scale
siteHistories <- simulateManySiteHistories(branchLength=0.5, rateMatrix=scaledSubstitutionRateMatrix, numberOfSites=1000)
plotNumbersOfSubstitutions(siteHistories)
