data <- readDiscreteCharacterData("data/simians4fold.nex")

n_species <- data.ntaxa()
n_branches <- 2 * n_species - 2
n_nodes <- 2 * n_species - 1
print(n_nodes)
taxa <- data.taxa()

# root age (dummy variable: will be fixed in the end)
root_age ~ dnUniform(0,100)

# tree is produced by a birth death process
lambda ~ dnExponential(1.0)
mu ~ dnExponential(1.0)
rho <- 1.0
timetree ~ dnBDP(lambda, mu, rho, root_age, samplingStrategy="uniform", condition="nTaxa", taxa=taxa)
tree <- readTrees("data/simians.tree", treetype="clock")[1]
tree.makeUltrametric()
timetree.clamp(tree)

# brownian process
sigma ~ dnExponential(1.0)
nodelograte[n_nodes] ~ dnNormal(mean=-4, sd=20)
for (i in (n_nodes-1):1)    {
    nodelograte[i] ~ dnNormal(mean=nodelograte[tree.parent(i)], sd=sigma * sqrt(tree.branchLength(i)))
    clockrate[i] := 0.5 * (exp(nodelograte[tree.parent(i)]) + exp(nodelograte[i]))
}

kappa ~ dnExponential(0.1)
gamma <- 0.33
logB ~ dnNormal(0,10)
logB.clamp(0)
logB.unclamp()
B := exp(logB)
print(B)
pfixWS := B / (1 - exp(-B))
pfixSW := -B / (1 - exp(B))
print(pfixWS, pfixSW)

eqfreq := Simplex(
    abs(0.5*(1-gamma) / (1-gamma+gamma*exp(B))),
    abs(0.5*gamma*exp(B) / (1-gamma+gamma*exp(B))),
    abs(0.5*gamma*exp(B) / (1-gamma+gamma*exp(B))),
    abs(0.5*(1-gamma) / (1-gamma+gamma*exp(B)))
)

print(eqfreq)

relrate := Simplex(
    abs(0.5*gamma*pfixWS / eqfreq[2]),
    abs(0.5*kappa*gamma*pfixWS / eqfreq[3]),
    abs(0.5*(1-gamma) / eqfreq[4]),
    abs(0.5*gamma / eqfreq[3]),
    abs(0.5*kappa*(1-gamma)*pfixSW / eqfreq[4]),
    abs(0.5*(1-gamma)*pfixSW / eqfreq[4])
)

print(relrate)

Q := fnGTR(relrate, eqfreq)

print(Q)

seq ~ dnPhyloCTMC( tree=timetree, Q=Q, branchRates=clockrate, type="DNA" ) 
seq.clamp(data)

my_model = model(timetree)

# moves
moves = VectorMoves()

moves.append(mvScale(lambda, weight=1.0))
moves.append(mvScale(mu, weight=1.0))

moves.append(mvScale(kappa, weight=1.0))
moves.append(mvSlide(logB, weight=1.0, delta=0.1))

moves.append(mvScale(sigma, weight=1.0))
for (i in 1:n_nodes) {
    moves.append(mvSlide(nodelograte[i], weight=1.0))
}

moves.append(mvNodeTimeSlideUniform(timetree, weight=20))
moves.append(mvSubtreeScale(timetree, weight=4))

monitors[1] = mnModel(filename="analyses/simians_constB.log", printgen=10, separator = TAB)
monitors[2] = mnFile(timetree ,filename="analyses/simians_constB.trees", printgen=10, separator = TAB)
monitors[3] = mnScreen(printgen=100, B, kappa)

# Make the analysis object
analysis = mcmc(my_model, monitors, moves)
# Run the MCMC
analysis.run(10000)

treetrace = readTreeTrace("analyses/simians_constB.trees", treetype="clock", burnin=0.1)
map_tree = mccTree(treetrace, "analyses/simians_constB.tree")

