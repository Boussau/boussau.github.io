data <- readDiscreteCharacterData("data/thermus5.nex")

n_species <- data.ntaxa()
n_branches <- 2 * n_species - 3
taxa <- data.taxa()

out_group = clade("Aquifex")

# tree topology
topology ~ dnUniformTopology(taxa, outgroup = out_group) 
for (i in 1:n_branches) {
 bl[i] ~ dnExponential(10.0)
}
psi := treeAssembly(topology, bl)

# total tree length (just for monitoring)
TL := sum(bl)

# Tamura 92 substitution process
kappa ~ dnExponential(0.1)
gamma ~ dnBeta(1.0, 1.0)
Q := fnT92(kappa=kappa, gc=gamma)

seq ~ dnPhyloCTMC( tree=psi, Q=Q, type="DNA" ) 
seq.clamp( data )

my_model = model(psi)

# moves
moves = VectorMoves()
moves.append(mvNNI(topology, weight=3.0))
moves.append(mvSPR(topology, weight=3.0))
moves.append(mvSlide(gamma, weight=1.0, delta=0.1))
moves.append(mvScale(kappa, weight=1.0))
for (i in 1:n_branches) {
   moves.append(mvScale(bl[i]))
}

monitors[1] = mnModel(filename="analyses/thermusT92.log", printgen=10, separator = TAB)
monitors[2] = mnFile(psi,filename="analyses/thermusT92.trees", printgen=10, separator = TAB)
monitors[3] = mnScreen(printgen=100, kappa, gamma)

# Make the analysis object
analysis = mcmc(my_model, monitors, moves)
# Run the MCMC
analysis.run(10000)

# Post-analysis: constructing the maximum a posteriori tree
treetrace = readTreeTrace("analyses/thermusT92.trees", treetype="non-clock", burnin=0.1)
map_tree = mapTree(treetrace, "analyses/thermusT92unrootedb_map.tree")


