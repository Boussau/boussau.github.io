data <- readDiscreteCharacterData("data/placBRCA1third.nex")
contdata <- readContinuousCharacterData("data/plac_lht.nex")

trait_index <- 2

n_species <- data.ntaxa()
n_branches <- 2 * n_species - 2
n_nodes <- 2 * n_species - 1
print(n_nodes)
taxa <- data.taxa()

# root age (dummy variable: will be fixed in the end)
root_age ~ dnUniform(0,100)

# tree is produced by a birth death process
lambda ~ dnExponential(1.0)
mu ~ dnExponential(1.0)
rho <- 1.0
timetree ~ dnBDP(lambda, mu, rho, root_age, samplingStrategy="uniform", condition="nTaxa", taxa=taxa)
tree <- readTrees("data/placBRCA1clock.tree", treetype="clock")[1]
tree.makeUltrametric()
timetree.clamp(tree)

# brownian process
sigma_mass ~ dnExponential(1.0)
sigma_mass.clamp(0.1)
nodelogmass[n_nodes] ~ dnNormal(mean=0, sd=20)
nodelogmass[n_nodes].clamp(0)
for (i in (n_nodes-1):1)    {
    nodelogmass[i] ~ dnNormal(mean=nodelogmass[tree.parent(i)], sd=sigma_mass * sqrt(tree.branchLength(i)))
}

print("missing:")
for (i in 1:n_species)  {
    if (contdata[contdata.taxonIndex(tree.nodeName(i))][trait_index] == -1.0) {
        print(tree.nodeName(i))
    }
}

for (i in 1:n_species)  {
    if (contdata[contdata.taxonIndex(tree.nodeName(i))][trait_index] != -1.0) {
        nodelogmass[i].clamp(log(abs(contdata[contdata.taxonIndex(tree.nodeName(i))][trait_index]),10))
    }
}

beta ~ dnNormal(mean=0, sd=1)
beta.clamp(0)

sigma_rate ~ dnExponential(1.0)
sigma_rate.clamp(0.1)
nodelograte[n_nodes] ~ dnNormal(mean=-4, sd=20)
nodelograte[n_nodes].clamp(0)
for (i in (n_nodes-1):1)    {
    nodelograte[i] ~ dnNormal(mean=nodelograte[tree.parent(i)] + beta*(nodelogmass[i] - nodelogmass[tree.parent(i)]), sd=sigma_rate * sqrt(tree.branchLength(i)))
    clockrate[i] := 0.5 * (exp(nodelograte[tree.parent(i)]) + exp(nodelograte[i]))
}

nodelogmass[n_nodes].unclamp()
nodelograte[n_nodes].unclamp()
sigma_mass.unclamp()
sigma_rate.unclamp()
beta.unclamp()

kappa ~ dnExponential(0.1)
gamma ~ dnBeta(1.0, 1.0)
Q := fnT92(kappa=kappa, gc=gamma)

seq ~ dnPhyloCTMC( tree=timetree, Q=Q, branchRates=clockrate, type="DNA" ) 
seq.clamp(data)

my_model = model(timetree)

# moves
moves = VectorMoves()

moves.append(mvScale(lambda, weight=1.0))
moves.append(mvScale(mu, weight=1.0))

moves.append(mvSlide(gamma, weight=1.0, delta=0.1))
moves.append(mvScale(kappa, weight=1.0))

moves.append(mvSlide(beta, weight=1.0))

moves.append(mvScale(sigma_mass, weight=1.0))
for (i in n_species:n_nodes) {
    moves.append(mvSlide(nodelogmass[i], weight=1.0))
}
for (i in 1:n_species)  {
    if (contdata[contdata.taxonIndex(tree.nodeName(i))][trait_index] == -1.0) {
        moves.append(mvSlide(nodelogmass[i], weight=1.0))
    }
}

moves.append(mvScale(sigma_rate, weight=1.0))
for (i in 1:n_nodes) {
    moves.append(mvSlide(nodelograte[i], weight=1.0))
}

moves.append(mvNodeTimeSlideUniform(timetree, weight=20))
moves.append(mvSubtreeScale(timetree, weight=4))

monitors[1] = mnModel(filename="analyses/placBRCA1_covrateb.log", printgen=10, separator = TAB)
monitors[2] = mnFile(timetree ,filename="analyses/placBRCA1_covrateb.trees", printgen=10, separator = TAB)
monitors[3] = mnScreen(printgen=100, beta, sigma_mass, sigma_rate, nodelogmass[n_nodes])

# Make the analysis object
analysis = mcmc(my_model, monitors, moves)
# Run the MCMC
analysis.run(10000)

treetrace = readTreeTrace("analyses/placBRCA1_covrateb.trees", treetype="clock", burnin=0.1)
map_tree = mccTree(treetrace, "analyses/placBRCA1_covrateb.tree")

