vec = rUniformInteger(n=1000, lower=1, upper=4)

counts = [0,0,0,0]
for (i in 1:vec.size()) {
  counts[vec[i]]=counts[vec[i]]+1
}

print(counts)

# alternative :
for (i in 1:vec.size()) {
  if (vec[i] == 1) {
  counts[1] = counts[1] + 1
  }
  else if (vec[i] == 2) {
  count[2] = counts[2] +1
  }
  else {counts[vec[i]]=counts[vec[i]]+1 }
}


#### Simulating along a branch
branchLength = 10
rate = 0.5

function Integer simulateOneCharacterAlongBranch (branchLength, rate) {
  currentTime = 0.0
#  currentState = rUniformInteger(n=1, lower=1, upper=4)[1]
  currentState = 1
  #print(currentState)
  while (currentTime < branchLength) {
    waitingTime = rexp( n=1, lambda=rate )[1]
    currentTime = currentTime + waitingTime
    if (currentTime < branchLength) {
      currentState = rUniformInteger(n=1, lower=1, upper=4)[1]
    }
    #print(waitingTime + " \t" + currentTime + "\t" + currentState)
  }
  return currentState
}


for (i in 1:10) {
  simulateOneCharacterAlongBranch(branchLength, rate)
}


# Number of differences
count = 0 ; for (i in 1:10) {if (simulateOneCharacterAlongBranch(5.0, rate) != 1) { count =count+1 }} ; print(count)










function Integer[] simulateOneCharacterAlongBranch (branchLength, rate) {
  currentTime = 0.0
  currentState =
  while (currentTime < branchLength) {

  }

}

simulateOneCharacterAlongBranch(branchLength, rate)
